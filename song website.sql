CREATE TABLE EVENTS
(
	ARTIST_NAME VARCHAR(200), 
	USER_AUTHONTICATION VARCHAR(200), 
	USER_FIRST_NAME VARCHAR(200),
	USER_GENDER VARCHAR(5),
	NO_ITEMS_IN_SESSION NUMERIC(10),
	USER_LAST_NAME VARCHAR(200), 
	SONG_LENGTH_IN_SECONDS NUMERIC(26, 6), 
	SONG_LEVEL VARCHAR(200), 
	USER_LOCATION VARCHAR(200), 
	SONG_METHOD VARCHAR(200), 	
	SONG_PLAYED VARCHAR(200), 
	USER_REGESTRATION_TIME_IN_SECONDS NUMERIC(26, 6), 
	SESSION_ID NUMERIC(5), 
	SONG_NAME VARCHAR(200), 
	SONG_STATUS NUMERIC(5), 
	TIME_IN_SECONDS_OF_PLAYING_SONG NUMERIC(26, 6), 
	USER_AGENT VARCHAR(400), 
	USER_ID NUMERIC(10)
);
copy EVENTS from 'D:\events.csv' with delimiter ',' csv header ;
select*
from EVENTS
----------------------------------------------------------------------
CREATE TABLE SONGS
(
	ARTIST_ID VARCHAR(100), 
	ARTIST_LATITUDE NUMERIC(20, 6),
	ARTIST_LOCATION VARCHAR(100),
	ARTIST_LONGTUDE NUMERIC(20, 6), 
	ARTIST_NAME VARCHAR(100), 
	SONG_DURATION_IN_SECONDS NUMERIC(20,6),
	ARTIST_NUM_OF_SONGS NUMERIC(5), 
	SONG_ID VARCHAR(100),
	SONG_NAME VARCHAR(100),
	SONG_REALASED_YEAR NUMERIC(5)
	
);
copy SONGS from 'D:\songs.csv' with delimiter ',' csv header encoding 'windows-1251';
-------------------------------------------------------------------------
1- Joins tables with artists
SELECT E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, S.SONG_DURATION_IN_SECONDS
, E.SONG_NAME, S.SONG_NAME, S.SONG_ID, S.SONG_REALASED_YEAR
FROM EVENTS E, SONGS S
WHERE E.ARTIST_NAME = S.ARTIST_NAME;

2- Joins tables with songs
SELECT E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, S.SONG_DURATION_IN_SECONDS
, E.SONG_NAME, S.SONG_NAME, S.SONG_ID, S.SONG_REALASED_YEAR
FROM EVENTS E join  SONGS S
on E.SONG_NAME = S.SONG_NAME;

1-- THE ORDER OF ARTISTS WITH THEIR LOCATIONS OCCORDING TO THE NUMBER OF USERS HEAR THEIR SONGS 

SELECT DISTINCT * FROM
(SELECT E.ARTIST_NAME, S.ARTIST_ID, ARTIST_LOCATION, ARTIST_LATITUDE, ARTIST_LONGTUDE
, COUNT(E.USER_ID) OVER(PARTITION BY E.ARTIST_NAME) USERS_NUMBER
FROM EVENTS E, SONGS S
WHERE E.ARTIST_NAME = S.ARTIST_NAME) USER_SUB_Q 
ORDER BY USERS_NUMBER DESC;

2-- SONGS ID THE USERS HEAR THE MOST ORDERD FORM THE MOST ONE TO THE LOWEST AND THE ARTIST OF EACH SONG

SELECT * FROM
(
 SELECT SONG_ID, S.SONG_NAME, S.ARTIST_ID, E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, 
COUNT(USER_ID) OVER(PARTITION BY SONG_ID) USERS_NUMBER
FROM EVENTS E, SONGS S
WHERE E.SONG_NAME = S.SONG_NAME AND SONG_PLAYED = 'NextSong'
	) SUB_QUERY ORDER BY USERS_NUMBER DESC;
	

3-- GET MOST PLAYED SONGS IN TOTAL SESSIONS ACCORDING TO THE NUMBER OF USERS WITH THEIR LENGHT, PAID STATUS, ARTIST NAME AND RANK 

SELECT * , DENSE_RANK() OVER(ORDER BY USERS_NUMBER DESC) FROM
(SELECT DISTINCT SONG_NAME, ARTIST_NAME, SONG_LEVEL, COUNT(USER_ID) OVER (PARTITION BY SONG_NAME) USERS_NUMBER
FROM EVENTS
WHERE SONG_PLAYED = 'NextSong') SUB_QUERY_1
WHERE SONG_NAME IS NOT NULL ;

4-- GET THE RANK OF EACH SONG IN EACH SESSION ACCORDING TO THE NUMBER OF USERS HEARD THEM IN THIS SESSION 

SELECT * From
(
SELECT  DISTINCT SESSION_ID, SONG_NAME, USERS_NUMBER
, ARTIST_NAME, SONG_LEVEL, DENSE_RANK()  OVER(PARTITION BY SESSION_ID ORDER BY USERS_NUMBER DESC) SONG_RANK FROM
(SELECT SESSION_ID, SONG_NAME, COUNT(USER_ID) OVER(PARTITION BY SESSION_ID, SONG_NAME) USERS_NUMBER, ARTIST_NAME, SONG_LEVEL
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong'
 ) SUB_QUERY) SUB_QUERY_2
 GROUP BY SESSION_ID, SONG_NAME, SONG_LEVEL, USERS_NUMBER, ARTIST_NAME, SONG_RANK
 ORDER BY SESSION_ID, SONG_RANK;
 
5-- ORDER OF ARTISTIS ACCORDING TO THE SONGS THEY MADE 

SELECT *, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER DESC) FROM 
(
SELECT DISTINCT ARTIST_NAME, SONG_NAME, COUNT(SONG_NAME) OVER(PARTITION BY ARTIST_NAME) SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL) SUB_QUERY;

6-- GET THE MOST USERS CONTRIBUTE IN THE SYSTEM ACCORDING TO THE NUMBER OF SONGS THEY HEARD IN ALL SESSIONS

SELECT *, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER) USER_RANK
FROM 
(
SELECT DISTINCT SESSION_ID, USER_ID, USER_FIRST_NAME, USER_GENDER, USER_LAST_NAME, SONG_NAME,
COUNT(SONG_NAME) OVER (PARTITION BY USER_ID) SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY;

7-- GET THE LONGEST SONG and SHORTEST SONG IN EACH SESSION 

SELECT SONG_NAME, ARTIST_NAME, SESSION_ID, SONG_LENGTH_IN_SECONDS, USER_ID, 
FIRST_VALUE(SONG_NAME) OVER(PARTITION BY SESSION_ID ORDER BY SONG_LENGTH_IN_SECONDS DESC) LONGEST_SONG, 
FIRST_VALUE(SONG_NAME) OVER(PARTITION BY SESSION_ID ORDER BY SONG_LENGTH_IN_SECONDS) SHORTEST_SONG
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong'
ORDER BY SESSION_ID;

8-- ANALYSIS IF THE PROPABILITY OF EACH USER SUCCESS TO ACCESS SONG (METHOD IS 200) FROM ALL REQUESTS 


SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, NUMBER_OF_TRAILS, SUCCESSFUL_TRAILS, 
CAST(SUCCESSFUL_TRAILS AS FLOAT) /NUMBER_OF_TRAILS SUCCESSFUL_PERCENTAGE
FROM 
(
SELECT USER_ID, USER_FIRST_NAME, USER_LAST_NAME
,COUNT(USER_ID) OVER(PARTITION BY USER_ID) NUMBER_OF_TRAILS
, COUNT (CASE WHEN SONG_STATUS = 200 THEN 1 END) OVER(PARTITION BY USER_ID) SUCCESSFUL_TRAILS 
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong' ) SUB_QUERY
ORDER BY USER_ID;

9-- GET THE NUMBER OF SONGS PAID FOR EACH USER, FREE AND PERCENTAGE OF PAID INCOME FROM EACH USER

SELECT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, PAID_SONGS_NUMBER, FREE_SONGS_NUMBER, 
CAST (PAID_SONGS_NUMBER AS FLOAT) / (PAID_SONGS_NUMBER + FREE_SONGS_NUMBER) PAID_SONGS_PERCENTAGE
FROM 
(
SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME,
COUNT(CASE SONG_LEVEL WHEN 'paid' THEN 1 END) OVER(PARTITION BY USER_ID) PAID_SONGS_NUMBER, 
COUNT(CASE SONG_LEVEL WHEN 'free' THEN 1 END) OVER(PARTITION BY USER_ID) FREE_SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY 
ORDER BY USER_ID;

10-- HOW LONG EACH USER SPEND IN OUR WEB SITE

SELECT USER_ID, DENSE_RANK() OVER(ORDER BY USER_DURATION_IN_SECONDS DESC) ,
USER_FIRST_NAME, USER_LAST_NAME, USER_DURATION_IN_SECONDS 
FROM 
(
SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, 
SUM(SONG_LENGTH_IN_SECONDS) OVER(PARTITION BY USER_ID) USER_DURATION_IN_SECONDS
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY;